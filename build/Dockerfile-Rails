# DockerFile

# syntax=docker/dockerfile:1
# check=error=true

# Base Ruby image
ARG RUBY_VERSION=3.2.6
FROM ruby:${RUBY_VERSION} AS build

ENV PATH="${PWD}/bin:${PATH}"

WORKDIR /rails

# Modify these defauls as needed
ARG NODE_VERSION=23.2.0
ARG INTERNAL_PORT=80
ARG EXTERNAL_PORT=80
ARG SSH_PORT="22"
ARG SSH_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8S2GcPW3TLnkg1QDPh0trWl1kZdaXVL1lY9A+jSUwcXKCAcxW6btomtTk5zdrCjRv/5EZkXy8aVBZmgK3ktrRmMO+3ypjiw/D50Vxnu8pT4wevfas8p3GNPPtCF88H4pnCBzLmY8OnXR5mit896eupYBrz4YfwAjhaZIgwKLBmsDW9lF4/w0OnKfhMyHnbk/v3H/ylr8OUj6wq3yawzD+u2EyktSpEyZjtVTs5+JDHCOaq/A6/ZHAu8SmOAR/f5auKS2FighmXpTkPHNXXXmqxBFBGRnu/SFDYBeVrLe0fNEbkGAsWM4AvpqAWkhwkuBbB646wTINcGbEqrM8+aKZ"
ARG SUDO_AVAILABLE="true"
ARG USERNAME="paul"
ARG CODE_ONE="53cc593cef49115b7c53a8bc0febcfc89e3d826aabbc2972756ee9110e6f1ce0"
ARG CODE_TWO="212d49cf12922cc9205bbe417dbade5f"
ARG RAILS_ENCRYPTED_PASSWORD="338x/3OUAyal0tJdySuN9Q==="
ARG USER_ENCRYPTED_PASSWORD="pVKFfO9bwvG6L1+ejXYj9g=="
ARG ROOT_ENCRYPTED_PASSWORD="WBLowLVTaEihLTvuIWmABEXGhKdgbfm66pk3QB2cxtc="

# Override the defaults with environmental variables
ENV NODE_VERSION=${NODE_VERSION}
ENV INTERNAL_PORT=${INTERNAL_PORT}
ENV EXTERNAL_PORT=${EXTERNAL_PORT}
ENV SSH_PORT=${SSH_PORT}
ENV SSH_PUBLIC_KEY=${SSH_PUBLIC_KEY}
ENV SUDO_AVAILABLE=${SUDO_AVAILABLE}
ENV USERNAME=${USERNAME}
ENV CODE_ONE=${CODE_ONE}
ENV CODE_TWO=${CODE_TWO}
ENV RAILS_ENCRYPTED_PASSWORD=${RAILS_ENCRYPTED_PASSWORD}
ENV USER_ENCRYPTED_PASSWORD=${USER_ENCRYPTED_PASSWORD}
ENV ROOT_ENCRYPTED_PASSWORD=${ROOT_ENCRYPTED_PASSWORD}

# Install base packages
RUN echo "*** Installing Base Packages..."
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    curl \
    libjemalloc2 \
    libvips \
    postgresql-client \
    openssl \
    build-essential \
    git \
    libpq-dev \
    node-gyp \
    pkg-config \
    python-is-python3 \
    procps \
    passwd \
    nano \
    libyaml-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives
RUN echo "*** Base Packages Installed."

# Install Node.js
RUN echo "*** Installing Node.js"
ENV PATH="/usr/local/node/bin:$PATH"
RUN curl -sL https://github.com/nodenv/node-build/archive/master.tar.gz | tar xz -C /tmp/ && \
    /tmp/node-build-master/bin/node-build "${NODE_VERSION}" /usr/local/node && \
    rm -rf /tmp/node-build-master
RUN echo "*** Node.js Installed."

# Optionally install ssh
RUN if [ -n "$SSH_PORT" ]; then \
      echo "*** Installing SSH Server..." ; \
      apt-get update -qq && \
      apt-get install --no-install-recommends -y sudo openssh-server && \
      rm -rf /var/lib/apt/lists /var/cache/apt/archives; \
      echo "*** SSH Server Installed" ; \
      echo "*** Configuring SSH...";  \
      mkdir /var/run/sshd && \
      echo "PasswordAuthentication no" >> /etc/ssh/sshd_config && \
      echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config && \
      echo "AuthorizedKeysFile %h/.ssh/authorized_keys" >> /etc/ssh/sshd_config; \
      echo "*** SSH Configured." ; \
    else \
      echo "*** SSH Server Not Installed" ; \
    fi

# Optionally install sudo and net tools
RUN if [ "${SUDO_AVAILABLE}" = "true" ]; then \
      echo "*** Setting up SUDO..." ; \
      apt-get update -qq && \
      apt-get install --no-install-recommends -y sudo iproute2 telnet curl && \
      rm -rf /var/lib/apt/lists /var/cache/apt/archives; \
      echo "*** SUDO Setup..." ; \
    else \
      echo "*** SUDO NOT Setup..." ; \
    fi

# Set up rails user
RUN echo "*** Setting up rails user..." && \
    groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    bin/decode-password -u rails -p ${RAILS_ENCRYPTED_PASSWORD} | chpasswd && \
    echo "*** Rails user setup..."

# Set up non-rails user
RUN echo "*** Setting up non-rails user..."
RUN groupadd --system --gid 1001 ${USERNAME} && \
    useradd ${USERNAME} --uid 1001 --gid 1001 --home-dir /home/${USERNAME} --shell /bin/bash && \
    bin/decode-password -u ${USERNAME} -p ${USER_ENCRYPTED_PASSWORD} | chpasswd
RUN echo "*** Non-rails user setup..."

# Optionally setup sudo access
RUN echo "*** Setting up SUDO access..."
RUN if [ "${SUDO_AVAILABLE}" = "true" ]; then \
      set -e; \
      echo "Configuring sudo access for rails" ; \
      echo "rails ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/rails && \
      chmod 0440 /etc/sudoers.d/rails; \
      echo "Configuring sudo access for ${USERNAME}" ; \
      echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && \
      chmod 0440 /etc/sudoers.d/${USERNAME}; \
      echo "*** SUDO access setup." ; \
    else \
      echo "*** SUDO access not setup." ; \
    fi

# Optionally setup ssh permissions
RUN if [ -n "$SSH_PORT" ]; then \
      set -e; \
      echo "Setting permissions for SSH..." ; \
      mkdir -p /home/rails/.ssh && \
      chmod 700 /home/rails/.ssh && \
      chown -R rails:rails /home/rails/.ssh && \
      mkdir -p /home/${USERNAME}/.ssh && \
      chmod 700 /home/${USERNAME}/.ssh && \
      chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.ssh; \
      echo "SSH permissions setup." ; \
    else \
      echo "SSH permissions NOT setup." ; \
    fi

RUN if [ -n "$SSH_PUBLIC_KEY" ]; then \
      set -e; \
      echo "Setting SSH public key..." ; \
      echo "$SSH_PUBLIC_KEY" > /home/rails/.ssh/authorized_keys && \
      chmod 600 /home/rails/.ssh/authorized_keys && \
      chown -R rails:rails /home/rails/.ssh ; \
      echo "SSH public key setup." ; \
    else \
      echo "SSH public key NOT setup." ; \
    fi

RUN bin/decode-password -u root -p ${ROOT_ENCRYPTED_PASSWORD} | chpasswd

FROM build AS bundle

WORKDIR /rails

ARG RAILS_ENV="development"
ARG RACK_ENV="development"
ARG RAILS_SERVE_STATIC_FILES="enabled"
ARG RAILS_MASTER_KEY="31c4d6937460cb67802017edd2016b94"
ARG SERVER_MODE="HTTP"
ARG DB_HOST="db"
ARG DB_USER="paul"
ARG DB_DATABASE="paul-carrick"
ARG DB_ENCRYPTED_PASSWORD="WBLowLVTaEihLTvuIWmABEXGhKdgbfm66pk3QB2cxtc="
ARG RECAPTCHA_ENABLED="true"
ARG RECAPTCHA_SITE_KEY="6LfMwnEqAAAAAP2KC-014xjgglMTBwiMWn2BM3Lw"
ARG RECAPTCHA_SECRET_KEY="6LfMwnEqAAAAAP7M_ruuL8-pDpnfiarYS_YWfDog"

ENV DOCKERIZED="true"
ENV RAILS_ENV="${RAILS_ENV}"
ENV RACK_ENV="${RACK_ENV}"
ENV RAILS_SERVE_STATIC_FILES="${RAILS_SERVE_STATIC_FILES}"
ENV RAILS_MASTER_KEY="${RAILS_MASTER_KEY}"
ENV SERVER_MODE="${SERVER_MODE}"
ENV DB_HOST=${DB_HOST}
ENV DB_HOST=${DB_USER}
ENV DB_DATABASE=${DB_DATABASE}
ENV DB_ENCRYPTED_PASSWORD=${DB_ENCRYPTED_PASSWORD}
ENV DB_URL="${DB_URL}"
ENV RECAPTCHA_ENABLED="${RECAPTCHA_ENABLED}"
ENV RECAPTCHA_SITE_KEY="${RECAPTCHA_ENABLED}"
ENV RECAPTCHA_SECRET_KEY="${RECAPTCHA_ENABLED}"

RUN echo "*** Copying Files to build..."
COPY --from=build /rails /rails
COPY . .
COPY build/initrails.d/ /rails
RUN echo "*** Files copied to build."

# Install the correct Bundler version
RUN echo "*** Installing Bundler..."
RUN gem install bundler -v '~> 2.5'
RUN echo "*** Bundler Installed..."

# Set production environment variables
ENV RAILS_ENV="${RAILS_ENV}" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/rails/bundle"

# Copy and install dependencies
RUN echo "*** Installing Gems"
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile
RUN echo "*** Gems Installed."

COPY package.json ./

RUN echo "*** Precompiling bootsnap ..."
RUN bundle exec bootsnap precompile app/ lib/
RUN echo "*** Bootsnap Precompiled."

COPY build/secrets/.env-rails /rails/env

# Expose HTTPS and SSH ports
EXPOSE ${EXTERNAL_PORT} ${SSH_PORT}

# Start Rails server (and optionall SSH Server)
CMD ["/bin/bash", "-c", \
     "/rails/itinitrails.d/entrypoint.sh /rails/bin/rails server -b 0.0.0.0 -p ${INTERNAL_PORT}"]
