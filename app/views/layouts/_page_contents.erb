<% if @page.present? %>
  <title><%= "paul-carrick.com - #{@page.title}" %></title>
<% else %>
  <title><%= "paul-carrick.com" %></title>
<% end %>

<%= render layout: "layouts/header" do %>
<% end %>

<% @missing_image ||= image_path("missing-image.jpg") %>

<section class="bg-light text-secondary">
  <div class="container">
    <p class="alert"><%= alert %></p>

    <% @contents.each do |content| %>
      <% section_classes = content == @focused_section ? 'highlight-section' : '' %>
      <div class="<%= section_classes %>">
        <% if content.image.present? %>
          <% if content.image =~ /\[(.*?)\]/m %>
            <%
              new_formatting = content.formatting
              images = Regexp.last_match(1).split(",").map do |image|
                begin
                  image_path(image.strip)
                rescue
                  byebug if Rails.env === "development" # rubocop:disable Lint/Debugger
                  @missing_image
                end
              end

              if new_formatting && new_formatting.length > 0
                formatting_json = JSON.parse(new_formatting)
                formatting_json["slide_show_images"] = images
                new_formatting = formatting_json.to_json
              else
                new_formatting = { slide_show_images: images }.to_json
              end
            %>
            <%= react_component("DisplayContent", {
              content: content.description,
              image: nil,
              link: content.link,
              format: new_formatting,
              section_id: content.section_name
            }) %>
          <% else %>
            <%
              image = nil

              if content.image
                begin
                  image = image_path(content.image)
                rescue
                  byebug if Rails.env === "development" # rubocop:disable Lint/Debugger
                  image = @missing_image
                end
              end
            %>
            <%= react_component("DisplayContent", {
              content: content.description,
              image: image,
              link: content.link,
              format: content.formatting,
              section_id: content.section_name
            }) %>
          <% end %>
        <% else %>
          <%= react_component("DisplayContent", { content: content.description,
                                                  image: nil,
                                                  link: content.link,
                                                  format: content.formatting,
                                                  section_id: content.section_name
          }) %>
        <% end %>
      </div>
    <% end %>

    <input type="hidden" id="content-rendered-signal" value="true"/>
  </div>
</section>

<%= render layout: "layouts/footer" do %>
<% end %>

<script>
  // TO DO?
  // This is due to some interaction between hotwired or turbo frames and React.
  // This was one solution chatgpt suggested. I'd love to find another.
  function handleEmptyContents() {
debugger;
    const contentsDiv = document.getElementById("contents");
    const queryString = window.location.search;
    const params = new URLSearchParams(queryString);

    if (!contentsDiv && ((typeof params === "undefined") || !params.get?.("reloaded"))) {
      const currentUrl = window.location.href.replace(/^http:/, "https:");

      window.open(currentUrl + "?reloaded=true", '_self');
    }
  }

  function scrollToSection() {
    const signalElement = document.getElementById("content-rendered-signal");

    if (signalElement) {
      // The hidden field is now in the DOM, execute your logic
      const params = new URLSearchParams(window.location.search);
      const sectionName = params.get("section_name");

      if (sectionName) {
        const sectionElement = document.getElementById(sectionName);

        if (sectionElement)
          sectionElement.scrollIntoView({behavior: "smooth", block: "start"});
      }
    }
  }

  function waitForRender(callback) {
    const signalElement = document.getElementById("content-rendered-signal");

    if (signalElement) {
      if (typeof callback === "function")
        callback();
    } else {
      setTimeout(waitForRender, 50);
    }
  }

  window.addEventListener("turbo:load", () => {
    const params = new URLSearchParams(window.location.search);
    const sectionName = params.get("section_name");

    if (sectionName) {
      setTimeout(() => waitForRender(handleSectionScroll), 500);
    }
    else {
      const currentUrl = window.location.href;

      if (currentUrl.indexOf("home"))
        setTimeout(() => waitForRender(handleEmptyContents), 100);
    }
  });
</script>
