<% content_for :title, "paul-carrick.com - Admin Dashboard - #{@image_file&.persisted? ? "Edit Image" : "New Image"}" %>
<%= render layout: "layouts/header" do %>
<% end %>

<%= render layout: "layouts/admin_menu" do %>
  <%= form_with(model: @image_file,
                url: @image_file&.persisted? ? admin_image_file_path(@image_file) : admin_image_files_path,
                method: @image_file&.persisted? ? :patch : :post,
                local: true) do |form| %>
    <div class="mb-3">
      <%= form.label :name, "Name*", class: "form-label" %>
      <%= form.text_field :name, class: "form-control", required: true, placeholder: "Enter the name of the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :mime_type, "Mime Type", class: "form-label" %><br>
      <%= form.select :mime_type,
                      options_for_select([
                                           ["", ""],
                                           %w[JPEG image/jpeg],
                                           %w[PNG image/png],
                                           %w[GIF image/gif],
                                           %w[BMP image/bmp],
                                           %w[WebP image/webp],
                                           %w[SVG image/svg+xml],
                                           %w[TIFF image/tiff],
                                           %w[ICO image/x-icon],
                                           %w[HEIC image/heic]
                                         ], selected: form.object.mime_type),
                      { class: "form-control", placeholder: "Select the MIME type for the image." } %>
    </div>

    <div class="mb-3">
      <%= form.label :group, "Group", class: "form-label" %>
      <%= form.text_field :group, id: "group-field", class: "form-control", placeholder: "Enter the group for the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :slide_order, "Slide Order", class: "form-label" %>
      <%= form.number_field :slide_order, id: "slide-order-field", class: "form-control", step: 1, min: 1, max: 999, value: @image_file.slide_order || nil %>
    </div>

    <div class="mb-3">
      <%= form.label :caption, "Caption", class: "form-label" %>
      <%= form.text_field :caption, class: "form-control", placeholder: "Enter the caption for the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :description, "Description", class: "form-label" %>
      <%= form.text_field :description, class: "form-control", placeholder: "Enter the description for the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :image, "Upload Image*" %>
      <%= form.file_field :image, required: (!@image_file&.persisted? || !@image_file.image.attached?), class: "form-control" %>
    </div>

    <!-- Add to Group Button -->
    <div class="mb-3">
      <button type="button" id="add-to-group-btn" class="btn btn-secondary">Add to Group</button>
    </div>

    <!-- Select Group Dropdown -->
    <div id="group-select-container" style="display: none;">
      <label for="group-select">Select a Group:</label>
      <select id="group-select" class="form-control"></select>
    </div>

    <div class="pb-3">
      * - Required Fields
    </div>

    <div class="mb-3">
      <%= form.submit "Save Image", class: "btn btn-primary me-3" %>
      <%= link_to("Cancel", admin_image_files_url, class: "btn btn-primary") %>
    </div>
  <% end %>
<% end %>

<%= render layout: "layouts/footer" do %>
<% end %>

<script>
  const addToGroupBtn = document.getElementById("add-to-group-btn");
  const groupSelectContainer = document.getElementById("group-select-container");
  const groupSelect = document.getElementById("group-select");
  const groupField = document.getElementById("group-field");
  const slideOrderField = document.getElementById("slide-order-field");

  // Fetch groups from the API
  async function fetchGroups() {
    try {
      const response = await fetch("https://paul-carrick.com/api/v1/image_files/groups");
      if (!response.ok) {
        throw new Error("Failed to fetch groups");
      }
      const data = await response.json();
      populateGroupSelect(data);
    } catch (error) {
      console.error("Error fetching groups:", error);
    }
  }

  // Populate the select dropdown with group options
  function populateGroupSelect(groups) {
    groupSelect.innerHTML = ""; // Clear existing options
    for (const [group, maxSlideOrder] of Object.entries(groups)) {
      const option = document.createElement("option");
      option.value = group;
      option.dataset.maxSlideOrder = maxSlideOrder; // Store max slide order as a data attribute
      option.textContent = `${group} (Max Slide Order: ${maxSlideOrder})`;
      groupSelect.appendChild(option);
    }
  }

  // Handle "Add to Group" button click
  addToGroupBtn.addEventListener("click", function () {
    fetchGroups();
    groupSelectContainer.style.display = "block";
  });

  // Handle group selection
  groupSelect.addEventListener("change", function () {
    const selectedOption = groupSelect.options[groupSelect.selectedIndex];
    const selectedGroup = selectedOption.value;
    const maxSlideOrder = parseInt(selectedOption.dataset.maxSlideOrder, 10);

    // Set the group field and slide order field
    groupField.value = selectedGroup;
    slideOrderField.value = maxSlideOrder + 1;
  });
</script>
