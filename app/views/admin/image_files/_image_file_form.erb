<% content_for :title, "paul-carrick.com - Admin Dashboard - #{@image_file&.persisted? ? "Edit Image" : "New Image"}" %>
<%= render layout: "layouts/header" do %>
<% end %>

<%= render layout: "layouts/admin_menu" do %>
  <%= form_with(model: @image_file,
                url: @image_file&.persisted? ? admin_image_file_path(@image_file) : admin_image_files_path,
                method: @image_file&.persisted? ? :patch : :post,
                local: true) do |form| %>
    <div class="mb-3">
      <%= form.label :name, "Name*", class: "form-label" %>
      <%= form.text_field :name, class: "form-control", required: true, placeholder: "Enter the name of the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :mime_type, "Mime Type", class: "form-label" %><br>
      <%= form.select :mime_type,
                      options_for_select([
                                           ["", ""],
                                           %w[JPEG image/jpeg],
                                           %w[PNG image/png],
                                           %w[GIF image/gif],
                                           %w[BMP image/bmp],
                                           %w[WebP image/webp],
                                           %w[SVG image/svg+xml],
                                           %w[TIFF image/tiff],
                                           %w[ICO image/x-icon],
                                           %w[HEIC image/heic]
                                         ], selected: form.object.mime_type),
                      { class: "form-control", placeholder: "Select the MIME type for the image." } %>
    </div>

    <div class="mb-3">
      <%= form.label :group, "Group", class: "form-label" %>
      <%= form.text_field :group, id: "group-field", class: "form-control", placeholder: "Enter the group for the image." %>
    </div>

    <div class="mb-3">
      <%= form.label :slide_order, "Slide Order", class: "form-label" %>
      <%= form.number_field :slide_order, id: "slide-order-field", class: "form-control", step: 1, min: 1, max: 999, value: @image_file.slide_order || nil %>
    </div>

    <div class="mb-3">
      <%= form.label :caption, "Caption", class: "form-label" %>
      <%= form.text_field :caption, class: "form-control", placeholder: "Enter the caption for the image." %>
    </div>

    <div>
      <%= form.label :description, "Description", class: "form-label" %>

      <!-- RTF Editor -->
      <div id="rtf-editor">
        <%= form.rich_text_area :description, class: "form-control rtf-text-area", style: "max-height: 6em;", onblur: "checkHTML();" %>
      </div>

      <!-- Raw Text Editor -->
      <div id="raw-editor" style="display: none;">
        <%= form.text_area :description, class: "form-control", rows: 3, onblur: "checkHTML();" %>
      </div>

      <!-- Toggle Button -->
      <button type="button" id="toggle-editor" class="btn btn-primary mt-2" style="max-width: 8em" onclick="toggleEditor(this, 'rtf-editor', 'raw-editor')">Raw HTML</button>
    </div>

    <div class="mb-3">
      <%= form.label :image, "Upload Image*" %>
      <%= form.file_field :image, required: (!@image_file&.persisted? || !@image_file.image.attached?), class: "form-control" %>
    </div>

    <!-- Add to Group Button -->
    <div class="mb-3">
      <button type="button"
              id="add-to-group-btn"
              class="btn btn-secondary"
              onclick="fetchGroups();">
        Add to Group
      </button>
    </div>

    <!-- Select Group Dropdown -->
    <div id="group-select-container" style="display: none;">
      <label for="group-select">Select a Group:</label>
      <select id="group-select"
              class="form-control"
              onchange="groupChanged();">
      </select>
    </div>

    <div class="pb-3">
      * - Required Fields
    </div>

    <div class="mb-3">
      <%= form.submit "Save Image", class: "btn btn-primary me-3" %>
      <%= link_to("Cancel", admin_image_files_url, class: "btn btn-primary") %>
    </div>
  <% end %>
<% end %>

<%= render layout: "layouts/footer" do %>
<% end %>

<script>
  // Fetch groups from the API
  async function fetchGroups() {
    const groupSelectContainer = document.getElementById("group-select-container");

    try {
      const response = await fetch("/api/v1/image_files/groups");

      if (!response.ok) {
        throw new Error("Failed to fetch groups");
      }
      const data = await response.json();
      populateGroupSelect(data);

      groupSelectContainer.style.display = 'block';
    } catch (error) {
      console.error("Error fetching groups:", error);
    }
  }

  // Populate the select dropdown with group options
  function populateGroupSelect(groups) {
    const groupSelect = document.getElementById("group-select");

    groupSelect.innerHTML = ""; // Clear existing options

    const blankOption = document.createElement("option");
    blankOption.value = "";
    blankOption.dataset.maxSlideOrder = null;
    blankOption.textContent = "";
    groupSelect.appendChild(blankOption);

    for (const [group, maxSlideOrder] of Object.entries(groups)) {
      const option = document.createElement("option");
      option.value = group;
      option.dataset.maxSlideOrder = maxSlideOrder; // Store max slide order as a data attribute
      option.textContent = `${group} (Max Slide Order: ${maxSlideOrder})`;
      groupSelect.appendChild(option);
    }
  }

  function groupChanged() {
    const groupSelect = document.getElementById("group-select");
    const selectedOption = groupSelect.options[groupSelect.selectedIndex];
    const selectedGroup = selectedOption.value;
    const maxSlideOrder = parseInt(selectedOption.dataset.maxSlideOrder, 10);
    const groupField = document.getElementById("group-field");
    const slideOrderField = document.getElementById("slide-order-field");

    // Set the group field and slide order field
    groupField.value = selectedGroup;
    slideOrderField.value = maxSlideOrder + 1;
  }

  async function validateHtml(field, fieldName) {
    const htmlContent = field.value;

    // Call the API to validate HTML
    const response = await fetch('/api/validate_html', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content // CSRF token for Rails
      },
      body: JSON.stringify({ html: htmlContent, field: fieldName })
    });

    // Handle the response
    if (response.ok) {
      field.classList.remove('invalid');
      return true;
    } else {
      const result = await response.json();
      alert(`HTML Validation Errors:\n${result.errors.join('\n')}`);
      field.classList.add('invalid'); // Add error styling
      return false;
    }
  }

  async function checkHTML(field) {
    const fieldName = field.getAttribute("name"); // Get the field name dynamically

    // Call validateHtml to check the HTML content
    const isValid = await validateHtml(field, fieldName);
    const errorArea = document.getElementById('error_area');

    if (!isValid) {
      if (errorArea)
        errorArea.innerHTML = `<p style="color: red;">The HTML content is invalid. Please correct it.</p>`;
    }
    else {
      if (errorArea)
        errorArea.innerHTML = ``;
    }
  }

  function toggleEditor(button, rtfEditorId, rawEditorId) {
    const rtfEditor = document.getElementById(rtfEditorId);
    const rawEditor = document.getElementById(rawEditorId);

    if (rtfEditor.style.display === "none") {
      rtfEditor.style.display = "block";
      rawEditor.style.display = "none";
      button.textContent = "Raw HTML";
    } else {
      rtfEditor.style.display = "none";
      rawEditor.style.display = "block";
      button.textContent = "HTML";
    }
  }

</script>
